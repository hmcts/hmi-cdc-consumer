plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.3.1.RELEASE'
  id 'org.owasp.dependencycheck' version '6.1.2'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '3.0'
  id 'au.com.dius.pact' version '4.0.10'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

group 'uk.gov.hmcts.futurehearings.hmi.cdc.consumer'
version '1.0-SNAPSHOT'

allprojects {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contactTest/resources')
  }

}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

/*jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}*/

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: spring-boot-template"
    property "sonar.projectKey", "uk.gov.hmcts.reform:spring-boot-template"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  System.setProperty('dependencyCheck.failBuild','false')
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.65'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '29.0-jre') {
      entry 'guava'
    }
  }
}

repositories {
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
  jcenter()
  mavenLocal()
  maven {
    url 'https://repo.spring.io/libs-snapshot'
  }
}

def versions = [
  junit               : '5.6.2',
  junitPlatform       : '1.6.2',
  reformLogging       : '5.1.5',
  springBoot          : springBoot.class.package.implementationVersion,
  springfoxSwagger    : '2.9.2',
  pact_version        : '3.6.15',
  serenity            : '2.2.9',
  restAssured         : '4.2.0',
  serenityreporter    : '2.1.4',
  postgresql          : '42.2.12'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger


  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.3.RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'

  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.3'

  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.36'
  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.36'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  //Contract Testing Implementation - Start
  contractTestCompile("org.springframework.boot:spring-boot-starter-web")
  contractTestCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  contractTestCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  contractTestCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  contractTestCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  //contractTestCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  implementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  implementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured


  contractTestCompile("org.springframework.boot:spring-boot-starter-web")
  contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
  contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'
  contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
  contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')

  contractTestCompile sourceSets.main.runtimeClasspath
  contractTestCompile sourceSets.test.runtimeClasspath
  //Contract Testing Implementation - End

  //functionalTestImplementation sourceSets.main.runtimeClasspath

  //smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.demo.Application'

bootJar {
  getArchiveFileName().set(provider {
    'spring-boot-template.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

configurations {
  contractTestCompile.extendsFrom testCompile
  contractTestRuntime.extendsFrom testRuntime
}

test {
  useJUnitPlatform()

}

task contract(type: Test) {
  group = 'Delivery pipeline'
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/futurehearings/hmi/cdc/consumer/**"
  systemProperty 'pact.rootDir', "pacts"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task runAndPublishConsumerPactTests(type: Test){
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {

  reports {
    defaultReports() // adds the standard console output

    markdown // report in markdown format
    json // report in json format
  }

  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion
  }
}

